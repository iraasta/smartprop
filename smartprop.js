// Generated by CoffeeScript 1.9.1
(function() {
  var SmartObject, SmartProp, assignObject, compare, mapObject, one_or_none,
    slice = [].slice;

  compare = function(a, s_or_reg) {
    if (s_or_reg instanceof RegExp) {
      return s_or_reg.test(a);
    } else {
      return s_or_reg === a;
    }
  };

  one_or_none = function(collection, lookFor) {
    var ref, rest, value;
    ref = collection.filter(function(key) {
      return compare(key, lookFor);
    }), value = ref[0], rest = 2 <= ref.length ? slice.call(ref, 1) : [];
    if ((value != null) && !rest.length) {
      return value;
    } else if (rest.length) {
      throw new Error("ambiguous property");
    } else {
      return void 0;
    }
  };

  module.exports.SmartProp = SmartProp = (function() {
    function SmartProp(prop) {
      this.prop = prop;
      this.cache = [];
      this.foundOnce = false;
    }


    /**
    @param collection : Object
    @param prop : String
    @param [name] : String
     */

    SmartProp.prototype.get = function(collection) {
      var result;
      if (!this.foundOnce) {
        return this._get(collection);
      } else {
        result = collection;
        this.cache.map(function(step) {
          return result = result[step];
        });
        return result;
      }
    };

    SmartProp.prototype._get = function(collection) {
      var keys, knv, multi, res, self;
      self = this;
      keys = Object.keys(collection);
      knv = keys.map(function(key) {
        return [key, collection[key]];
      });
      res = one_or_none(keys, self.prop);
      if (!res) {
        multi = (knv.filter(function(arg) {
          var k, v;
          k = arg[0], v = arg[1];
          return (typeof v) === "object";
        })).map(function(arg) {
          var k, v;
          k = arg[0], v = arg[1];
          self.cache.push(k);
          return self._get(v);
        });
        if (!multi.length) {
          return null;
        } else if (multi.length === 1) {
          self.foundOnce = true;
          return multi[0];
        } else {
          throw new Error("ambiguous property");
        }
      } else {
        self.cache.push(res);
        return collection[res];
      }
    };

    return SmartProp;

  })();

  mapObject = function(obj, fn) {
    var newobj;
    newobj = {};
    Object.keys(obj).map(function(key) {
      var val;
      val = obj[key];
      if (typeof val === "object" && !val instanceof RegExp) {
        return newobj[key] = mapObject(val, fn);
      } else {
        return newobj[key] = fn(key, val);
      }
    });
    return newobj;
  };

  assignObject = function(from, to) {
    var newobj;
    newobj = {};
    Object.keys(to).map(function(key) {
      var val;
      val = to[key];
      if (typeof val === "object" && !val instanceof RegExp) {
        return newobj[key] = val.get(from);
      } else {
        return newobj[key] = val.get(from);
      }
    });
    return newobj;
  };

  module.exports.SmartObject = SmartObject = (function() {
    function SmartObject(obj) {
      this.obj = mapObject(obj, function(key, value) {
        return new SmartProp(value);
      });
    }

    SmartObject.prototype.map = function(target) {
      return assignObject(target, this.obj);
    };

    return SmartObject;

  })();

}).call(this);
